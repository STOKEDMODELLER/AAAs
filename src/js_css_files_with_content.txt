=========================
File: ./api/clientsApi.js
=========================
import axios from "axios";

const API_BASE_URL = "http://13.246.7.5:5000/api";

export const getClients = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/clients`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data || "Error fetching clients");
  }
};

export const addClient = async (clientName: string) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/clients`, { name: clientName });
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data || "Error adding client");
  }
};



=========================
File: ./App.css
=========================
@tailwind base;
@tailwind components;
@tailwind utilities;



=========================
File: ./App.js
=========================
import React, { useEffect, useState } from "react";
import "./App.css"; // Import Tailwind CSS

import ClientTable from "./components/ClientTable";
import LoanList from "./components/LoanList";
import PaymentList from "./components/PaymentList";
import Notification from "./components/Notification";
import Report from "./components/Report"; // Import the new Report component

const App = () => {
  const [clients, setClients] = useState([]);
  const [loans, setLoans] = useState([]);
  const [payments, setPayments] = useState([]);
  const [selectedClient, setSelectedClient] = useState(null);
  const [selectedLoan, setSelectedLoan] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [notification, setNotification] = useState(null);

  const fetchData = async (endpoint, setData, resourceName) => {
    try {
      const response = await fetch(endpoint);
      if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);
      const { data } = await response.json();
      setData(data);
    } catch (err) {
      console.error(`Error fetching ${resourceName}:`, err.message);
      setError(`Failed to fetch ${resourceName}`);
    }
  };

  // Fetch Payments
  const fetchPayments = async () => {
    try {
      const response = await fetch("http://13.246.7.5:5000/api/payments");
      if (!response.ok) {
        throw new Error("Failed to fetch payments.");
      }
      const result = await response.json();
      setPayments(result.data || []);
    } catch (error) {
      console.error("Error fetching payments:", error);
      setNotification({ type: "error", message: error.message });
    }
  };

  const fetchLoans = async () => {
    await fetchData("http://13.246.7.5:5000/api/loans", setLoans, "loans");
  };

  useEffect(() => {
    setLoading(true);
  
    Promise.all([
      fetchData("http://13.246.7.5:5000/api/clients", setClients, "clients"),
      fetchLoans(),
      fetchData("http://13.246.7.5:5000/api/payments", setPayments, "payments"),
    ]).finally(() => setLoading(false));
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <Notification type="info" message="Loading... Hang tight while we fetch your data!" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <Notification type="error" message={error} />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="max-w-10xl mx-auto bg-white rounded-lg shadow-lg p-6">
        <header className="mb-6 text-center">
          <h1 className="text-4xl font-bold text-gray-800">Welcome to Your Dashboard</h1>
          <p className="text-gray-600 mt-2">
            Your comprehensive view for managing clients, loans, and payments. Discover actionable
            insights and seamless management in every section.
          </p>
        </header>

        {/* Split Page Layout */}
        <div className="grid grid-cols-2 gap-4">
          {/* Left Column */}
          <div className="bg-gray-50 p-4 rounded-lg flex flex-col space-y-6">
            <section>
              <h2 className="text-2xl font-semibold text-gray-700 mb-4">Clients</h2>
              <ClientTable
                clients={clients}
                onSelectClient={(client) => {
                  setSelectedClient(client);
                  setSelectedLoan(null);
                }}
              />
            </section>

            <section>
              <h2 className="text-2xl font-semibold text-gray-700 mb-4">Loans</h2>
              <LoanList
                loans={loans}
                onSelectLoan={(loan) => setSelectedClient(loan)}
                fetchLoans={fetchLoans} // Pass the fetchLoans function
              />

            </section>

            <section>

              <PaymentList
                payments={payments}
                refreshPayments={fetchPayments} // Pass the refresh function
                clients={clients} // Pass client data for mapping
              />            
              </section>
          </div>

          {/* Right Column: Report */}
          <Report
            selectedClient={selectedClient}
            selectedLoan={selectedLoan}
            payments={payments}
            clients={clients}
            loans={loans}
            setSelectedClient={setSelectedClient}
            setSelectedLoan={setSelectedLoan}
          />
        </div>
      </div>

      {/* Notification */}
      {notification && <Notification type={notification.type} message={notification.message} />}
    </div>
  );
};

export default App;



=========================
File: ./App.test.js
=========================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});



=========================
File: ./components/AddClientForm.js
=========================
import React, { useState, useEffect } from "react";
import Notification from "./Notification";

/**
 * A reusable form for adding or editing a client.
 *
 * Props:
 * - existingClient (optional): Object with client data for editing.
 * - onSubmit: Function to handle form submission (add/edit).
 * - onClose: Function to close the modal.
 * - setNotification: Function to display success/error notifications.
 */
const AddClientForm = ({ existingClient, onSubmit, onClose, setNotification }) => {
  const [formData, setFormData] = useState({
    clientID: "",
    name: "",
    address: "",
    email: "",
    contactNumber: "",
    saID: "",
    passport: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Populate form fields if editing an existing client
  useEffect(() => {
    if (existingClient) {
      setFormData({
        clientID: existingClient.clientID || "",
        name: existingClient.name || "",
        address: existingClient.address || "",
        email: existingClient.email || "",
        contactNumber: existingClient.contactNumber || "",
        saID: existingClient.saID || "",
        passport: existingClient.passport || "",
      });
    }
  }, [existingClient]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Basic front-end validation examples
    if (!formData.clientID.trim()) {
      setNotification({ type: "error", message: "Client ID is required." });
      return;
    }
    if (!formData.name.trim()) {
      setNotification({ type: "error", message: "Name is required." });
      return;
    }
    if (formData.email && !formData.email.includes("@")) {
      setNotification({ type: "error", message: "Invalid email format." });
      return;
    }

    setIsSubmitting(true);

    try {
      await onSubmit(formData);
      // onSubmit is expected to handle API calls and throw an error if something fails
      onClose();
    } catch (err) {
      setNotification({ type: "error", message: err.message });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="clientID" className="block text-gray-600 font-medium">
          Client ID:
        </label>
        <input
          id="clientID"
          name="clientID"
          value={formData.clientID}
          onChange={handleChange}
          className="w-full p-2 rounded-md bg-gray-100 border border-gray-300 focus:ring-2 focus:ring-blue-500"
          required
        />
      </div>

      <div>
        <label htmlFor="name" className="block text-gray-600 font-medium">
          Name:
        </label>
        <input
          id="name"
          name="name"
          value={formData.name}
          onChange={handleChange}
          className="w-full p-2 rounded-md bg-gray-100 border border-gray-300 focus:ring-2 focus:ring-blue-500"
          required
        />
      </div>

      <div>
        <label htmlFor="address" className="block text-gray-600 font-medium">
          Address:
        </label>
        <input
          id="address"
          name="address"
          value={formData.address}
          onChange={handleChange}
          className="w-full p-2 rounded-md bg-gray-100 border border-gray-300 focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div>
        <label htmlFor="email" className="block text-gray-600 font-medium">
          Email:
        </label>
        <input
          id="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          className="w-full p-2 rounded-md bg-gray-100 border border-gray-300 focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div>
        <label htmlFor="contactNumber" className="block text-gray-600 font-medium">
          Contact Number:
        </label>
        <input
          id="contactNumber"
          name="contactNumber"
          value={formData.contactNumber}
          onChange={handleChange}
          className="w-full p-2 rounded-md bg-gray-100 border border-gray-300 focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div>
        <label htmlFor="saID" className="block text-gray-600 font-medium">
          SA ID:
        </label>
        <input
          id="saID"
          name="saID"
          value={formData.saID}
          onChange={handleChange}
          className="w-full p-2 rounded-md bg-gray-100 border border-gray-300 focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div>
        <label htmlFor="passport" className="block text-gray-600 font-medium">
          Passport:
        </label>
        <input
          id="passport"
          name="passport"
          value={formData.passport}
          onChange={handleChange}
          className="w-full p-2 rounded-md bg-gray-100 border border-gray-300 focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <button
        type="submit"
        disabled={isSubmitting}
        className={`w-full p-2 rounded-md text-white font-semibold transition-all ${
          isSubmitting
            ? "bg-gray-500 cursor-not-allowed"
            : "bg-blue-500 hover:bg-blue-600"
        }`}
      >
        {isSubmitting
          ? "Saving..."
          : existingClient
          ? "Save Changes"
          : "Add Client"}
      </button>
    </form>
  );
};

export default AddClientForm;



=========================
File: ./components/ClientCard.js
=========================
import React, { useState } from "react";
import Modal from "./Modal";
import AddClientForm from "./AddClientForm";
import GlobalDataTable from "./GlobalDataTable";

/**
 * Uses a global data table to present the client's fields in a tabular format,
 * with an "Edit Client" button that opens a modal for updating.
 *
 * Props:
 * - client: the client object with fields like clientID, name, email, etc.
 * - refreshClients: function to refetch client data
 */
function ClientCard({ client, refreshClients }) {
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const handleEditSubmit = async (updatedClient) => {
    const url = `http://13.246.7.5:5000/api/clients/${client._id}`;
    const response = await fetch(url, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updatedClient),
    });

    const result = await response.json();
    if (!response.ok) {
      throw new Error(result.message || "Error editing client.");
    }
    await refreshClients();
  };

  // Convert client object into data table rows
  const columns = [
    { Header: "Field", accessor: "fieldName" },
    { Header: "Value", accessor: "value" },
  ];

  const clientData = [
    { fieldName: "Client ID", value: client.clientID },
    { fieldName: "Name", value: client.name },
    { fieldName: "Email", value: client.email },
    { fieldName: "Contact Number", value: client.contactNumber },
    { fieldName: "SA ID", value: client.saID },
    { fieldName: "Passport", value: client.passport },
    { fieldName: "Address", value: client.address },
  ];

  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-lg p-4 hover:shadow-xl transition-shadow duration-300">
      <h3 className="text-lg font-bold text-gray-800 mb-2">
        Client Overview
      </h3>

      <GlobalDataTable
        title={`${client.name || "Unknown Client"}'s Details`}
        columns={columns}
        data={clientData}
        loading={false}
        error={null}
        // No search needed for a small data set
        onGlobalFilterChange={null}
        // Show all rows at once
        initialPageSize={clientData.length}
      />

      <button
        onClick={() => setIsModalOpen(true)}
        className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-200"
      >
        Edit Client
      </button>

      {isModalOpen && (
        <Modal
          isOpen={isModalOpen}
          onClose={handleCloseModal}
          title={`Edit Client: ${client.name}`}
          description="Update this client's information, like name or email. Click 'Save Changes' when finished."
        >
          <AddClientForm
            existingClient={client}
            onSubmit={handleEditSubmit}
            onClose={handleCloseModal}
            setNotification={() => {}}
          />
        </Modal>
      )}
    </div>
  );
}

export default ClientCard;



=========================
File: ./components/ClientDropdown.js
=========================
import React from "react";
import { useClients } from "../context/ClientsContext";

const ClientDropdown = () => {
  const { clients, loading, error } = useClients();

  if (loading) {
    return (
      <div className="bg-gray-800 p-6 rounded-lg shadow-lg text-white w-full max-w-md mx-auto">
        <p className="text-gray-400">Loading clients...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-gray-800 p-6 rounded-lg shadow-lg text-white w-full max-w-md mx-auto">
        <p className="text-red-500">Error: {error}</p>
      </div>
    );
  }

  if (clients.length === 0) {
    return (
      <div className="bg-gray-800 p-6 rounded-lg shadow-lg text-white w-full max-w-md mx-auto">
        <p className="text-gray-400">No clients to display.</p>
      </div>
    );
  }

  return (
    <div className="bg-gray-800 p-6 rounded-lg shadow-lg text-white w-full max-w-md mx-auto">
      <label
        htmlFor="clientDropdown"
        className="block text-gray-400 font-medium mb-2"
      >
        Select a Client:
      </label>
      <select
        id="clientDropdown"
        className="w-full p-2 bg-gray-700 text-white rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400"
        defaultValue=""
      >
        <option value="" disabled>
          -- Select Client --
        </option>
        {clients.map((client) => (
          <option key={client._id} value={client.name}>
            {client.name}
          </option>
        ))}
      </select>
    </div>
  );
};

export default ClientDropdown;



=========================
File: ./components/ClientList.js
=========================
import React, { useState } from "react";
import ClientCard from "./ClientCard";
import Modal from "./Modal";
import AddClientForm from "./AddClientForm";

/**
 * Shows a list of ClientCards, and also includes a button to Add a new Client.
 * The actual table-based approach is handled by ClientTable.js,
 * but this "card layout" approach is sometimes useful as well.
 *
 * Props:
 * - clients: Array of client objects
 * - refreshClients: A function to refetch or refresh the client list
 */
const ClientList = ({ clients, refreshClients }) => {
  const [showAddClientModal, setShowAddClientModal] = useState(false);

  const openAddClientModal = () => {
    setShowAddClientModal(true);
  };

  const closeAddClientModal = () => {
    setShowAddClientModal(false);
  };

  const handleAddClientSubmit = async (newClient) => {
    const response = await fetch("http://13.246.7.5:5000/api/clients", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(newClient),
    });

    const result = await response.json();
    if (!response.ok) {
      throw new Error(result.message || "Error adding new client.");
    }

    await refreshClients();
  };

  return (
    <div className="w-full">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-semibold text-gray-700">Clients</h2>
        <button
          onClick={openAddClientModal}
          className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition"
        >
          Add Client
        </button>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {clients && clients.length > 0 ? (
          clients.map((client) => (
            <ClientCard
              key={client._id || client.clientID}
              client={client}
              refreshClients={refreshClients}
            />
          ))
        ) : (
          <p className="text-gray-500 italic col-span-full">
            No clients found. Add new clients to build your network and keep track of valuable connections.
          </p>
        )}
      </div>

      {showAddClientModal && (
        <Modal
          isOpen={showAddClientModal}
          onClose={closeAddClientModal}
          title="Add New Client"
        >
          <AddClientForm
            onSubmit={handleAddClientSubmit}
            onClose={closeAddClientModal}
            setNotification={() => {}}
          />
        </Modal>
      )}
    </div>
  );
};

export default ClientList;



=========================
File: ./components/ClientTable.js
=========================
import React, { useState, useEffect, useCallback, useMemo } from "react";
import GlobalDataTable from "./GlobalDataTable";
import Notification from "./Notification";
import Modal from "./Modal";
import AddClientForm from "./AddClientForm";

/**
 * ClientTable - displays and manages clients using the GlobalDataTable.
 * Features:
 *  - Fetch clients from server
 *  - Searching, sorting, pagination
 *  - Modal to add or edit a client
 */
function ClientTable() {
  const [clients, setClients] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // State for the Add/Edit modal
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedClient, setSelectedClient] = useState(null);

  // Notification shown within the modal (success or error)
  const [notification, setNotification] = useState(null);

  /**
   * Fetches all clients from the server.
   */
  const fetchClients = useCallback(async () => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch("http://13.246.7.5:5000/api/clients");
      if (!response.ok) {
        throw new Error(`Error fetching clients: ${response.status}`);
      }
      const { data } = await response.json();
      setClients(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, []);

  // Fetch clients on component mount
  useEffect(() => {
    fetchClients();
  }, [fetchClients]);

  /**
   * Opens the Add/Edit client modal.
   * @param {object|null} client - if null, create mode; otherwise edit mode.
   */
  const openModal = (client = null) => {
    setSelectedClient(client);
    setIsModalOpen(true);
    setNotification(null);
  };

  /**
   * Closes the modal.
   */
  const closeModal = () => {
    setSelectedClient(null);
    setIsModalOpen(false);
    setNotification(null);
  };

  /**
   * Handles creating or updating a client.
   * @param {object} clientData - new or updated client object
   */
  const handleSubmitClient = async (clientData) => {
    let url = "http://13.246.7.5:5000/api/clients";
    let method = "POST";

    // If editing
    if (selectedClient && selectedClient._id) {
      url = `http://13.246.7.5:5000/api/clients/${selectedClient._id}`;
      method = "PUT";
    }

    const response = await fetch(url, {
      method,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(clientData),
    });

    const result = await response.json();
    if (!response.ok) {
      throw new Error(result.message || "Failed to save client details.");
    }

    // On success, notify user and refresh table
    setNotification({ type: "success", message: "Client saved successfully!" });
    await fetchClients();
  };

  /**
   * useMemo ensures columns aren't recreated on every render.
   */
  const columns = useMemo(
    () => [
      {
        Header: "Client ID",
        accessor: "clientID",
      },
      {
        Header: "Name",
        accessor: "name",
      },
      {
        Header: "Email",
        accessor: "email",
      },
      {
        Header: "Contact Number",
        accessor: "contactNumber",
      },
      {
        Header: "Actions",
        Cell: ({ row }) => {
          const client = row.original;
          return (
            <button
              onClick={() => openModal(client)}
              className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
            >
              Edit
            </button>
          );
        },
      },
    ],
    []
  );

  return (
    <div className="bg-white rounded-lg shadow-lg p-4">
      {/* Header Row: Title + Add Client Button */}
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">Clients</h2>
        <button
          onClick={() => openModal(null)}
          className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition"
        >
          Add Client
        </button>
      </div>

      {/* Optional search filter */}
      <div className="mb-4">
        {/* You can remove this if you want to rely on GlobalDataTable's built-in approach. */}
        {/* Or pass a callback for onGlobalFilterChange to handle searching. */}
      </div>

      {loading && <Notification type="info" message="Loading data..." />}
      {error && <Notification type="error" message={error} />}

      {/* Our reusable global table */}
      <GlobalDataTable
        title="Client Directory"
        columns={columns}
        data={clients}
        loading={loading}
        error={error}
        // If you want an actual search field, pass a callback:
        onGlobalFilterChange={() => {}}
        initialPageSize={5}
      />

      {/* Modal for Add/Edit */}
      <Modal
        isOpen={isModalOpen}
        onClose={closeModal}
        title={
          selectedClient
            ? `Edit Client: ${selectedClient.name}`
            : "Add New Client"
        }
        description={
          selectedClient
            ? "Update this client's profile. After editing, click 'Save Changes' to confirm."
            : "Create a brand new client profile. Fill in the required fields and click 'Add Client' when done."
        }
        notification={notification}
      >
        <AddClientForm
          existingClient={selectedClient}
          onSubmit={handleSubmitClient}
          onClose={closeModal}
          setNotification={setNotification}
        />
      </Modal>
    </div>
  );
}

export default ClientTable;



=========================
File: ./components/GlobalDataTable.js
=========================
import React from "react";
import {
  useTable,
  useFilters,
  useSortBy,
  usePagination,
  useGlobalFilter,
} from "react-table";
import Notification from "./Notification";

/**
 * A reusable data table using React Table v7, with:
 * - Sorting
 * - Pagination
 * - Optional global filter
 * - Loading & error states
 *
 * Props:
 * - columns (required): Array describing each column definition { Header, accessor, ... }
 * - data (required): The array of data objects to display
 * - loading (optional): Boolean, if true shows a loading state
 * - error (optional): String or null, if not null shows an error
 * - title (optional): String displayed as table title
 * - onGlobalFilterChange (optional): Callback to enable searching
 * - initialPageSize (optional): number, sets initial page size (default: 5)
 */
function GlobalDataTable({
  columns,
  data,
  loading = false,
  error = null,
  title = "Data Table",
  onGlobalFilterChange,
  initialPageSize = 5,
}) {
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    // The current 'page' of rows, plus pagination
    page,
    canPreviousPage,
    canNextPage,
    pageOptions,
    gotoPage,
    nextPage,
    previousPage,
    state: { pageIndex },
    setGlobalFilter,
  } = useTable(
    {
      columns,
      data,
      initialState: { pageIndex: 0, pageSize: initialPageSize },
    },
    useFilters,
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  // If parent wants global filtering, we handle it here
  const handleGlobalFilter = (event) => {
    setGlobalFilter(event.target.value);
    if (onGlobalFilterChange) onGlobalFilterChange(event.target.value);
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-4">
      {/* Table title + optional filter */}
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">{title}</h2>
        {onGlobalFilterChange && (
          <input
            type="text"
            placeholder={`Search in ${title}...`}
            onChange={handleGlobalFilter}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        )}
      </div>

      {/* Loading / Error states */}
      {loading && <Notification type="info" message="Loading data..." />}
      {error && <Notification type="error" message={error} />}

      {/* Table */}
      <div className="overflow-x-auto">
        <table
          {...getTableProps()}
          className="min-w-full bg-white border border-gray-300"
        >
          <thead>
            {headerGroups.map((headerGroup) => (
              <tr
                {...headerGroup.getHeaderGroupProps()}
                className="bg-gray-100"
              >
                {headerGroup.headers.map((column) => (
                  <th
                    {...column.getHeaderProps(
                      column.getSortByToggleProps?.()
                    )}
                    className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm font-semibold text-gray-700 cursor-pointer"
                  >
                    {column.render("Header")}
                    {column.isSorted
                      ? column.isSortedDesc
                        ? " ↓"
                        : " ↑"
                      : ""}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody {...getTableBodyProps()}>
            {page.map((row) => {
              prepareRow(row);
              return (
                <tr
                  {...row.getRowProps()}
                  className="hover:bg-gray-50 border-b border-gray-200"
                >
                  {row.cells.map((cell) => (
                    <td
                      {...cell.getCellProps()}
                      className="px-6 py-4 text-sm text-gray-700"
                    >
                      {cell.render("Cell")}
                    </td>
                  ))}
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* Pagination Controls */}
      <div className="flex items-center justify-center mt-4 space-x-2">
        <button
          onClick={() => gotoPage(0)}
          disabled={!canPreviousPage}
          className={`px-2 py-1 border rounded ${
            !canPreviousPage ? "bg-gray-300 cursor-not-allowed" : "bg-gray-200"
          }`}
        >
          {"<<"}
        </button>
        <button
          onClick={() => previousPage()}
          disabled={!canPreviousPage}
          className={`px-2 py-1 border rounded ${
            !canPreviousPage ? "bg-gray-300 cursor-not-allowed" : "bg-gray-200"
          }`}
        >
          {"<"}
        </button>
        <span className="mx-2">
          Page{" "}
          <strong>
            {pageIndex + 1} of {pageOptions.length}
          </strong>
        </span>
        <button
          onClick={() => nextPage()}
          disabled={!canNextPage}
          className={`px-2 py-1 border rounded ${
            !canNextPage ? "bg-gray-300 cursor-not-allowed" : "bg-gray-200"
          }`}
        >
          {">"}
        </button>
        <button
          onClick={() => gotoPage(pageOptions.length - 1)}
          disabled={!canNextPage}
          className={`px-2 py-1 border rounded ${
            !canNextPage ? "bg-gray-300 cursor-not-allowed" : "bg-gray-200"
          }`}
        >
          {">>"}
        </button>
      </div>
    </div>
  );
}

export default GlobalDataTable;



=========================
File: ./components/LoanCard.js
=========================
import React from "react";

/**
 * LoanCard - A simple card showcasing key loan info.
 *
 * Props:
 * - loan (required): The loan object containing fields like _id, loanID, loanAmount, etc.
 * - onEdit (required): A function triggered when the user wants to edit this loan
 */
function LoanCard({ loan, onEdit }) {
  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-lg p-4 hover:shadow-xl transition-shadow duration-300">
      <h3 className="text-lg font-bold text-gray-800">Loan ID: {loan.loanID}</h3>
      <p className="text-gray-600 mt-2">Loan Amount: ${loan.loanAmount}</p>

      <div className="mt-4 flex gap-2">
        <button className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition duration-200">
          View Loan Details
        </button>
        <button
          onClick={onEdit}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-200"
        >
          Edit Loan
        </button>
      </div>
    </div>
  );
}

export default LoanCard;



=========================
File: ./components/LoanForm.js
=========================
import React, { useState, useEffect } from "react";

function LoanForm({ existingLoan, onSubmit, onClose, setNotification }) {
  const [formData, setFormData] = useState({
    loanID: "",
    clientID: "",
    loanAmount: "",
    interestRate: "",
    startDate: "",
    endDate: "",
    adminFee: "",
  });
  const [clients, setClients] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [termMonths, settermMonths] = useState("");

  // Helper to format numbers with commas
  const formatNumber = (value) => {
    if (!value) return "";
    const parts = value.toString().split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return parts.join(".");
  };

  // Helper to parse formatted numbers back to plain numbers
  const parseNumber = (value) => value.replace(/,/g, "");

  const generateRandomLoanID = () => {
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let result = "LN";
    for (let i = 0; i < 6; i++) {
      result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
  };

  const fetchClients = async () => {
    try {
      const response = await fetch("http://13.246.7.5:5000/api/clients");
      if (!response.ok) {
        throw new Error(`Failed to fetch clients: ${response.status}`);
      }
      const { data } = await response.json();
      setClients(data);
    } catch (err) {
      console.error("Error fetching clients:", err.message);
      setNotification?.({ type: "error", message: "Could not load clients." });
    }
  };

  const calculatetermMonths = (start, end) => {
    const startDate = new Date(start);
    const endDate = new Date(end);

    if (isNaN(startDate) || isNaN(endDate)) {
      console.error("Invalid dates provided.");
      return null;
    }

    if (endDate <= startDate) {
      console.error("End Date must be after Start Date.");
      return null;
    }

    let years = endDate.getFullYear() - startDate.getFullYear();
    let months = endDate.getMonth() - startDate.getMonth();
    let totalMonths = years * 12 + months;

    if (endDate.getDate() < startDate.getDate()) {
      totalMonths -= 1;
    }

    return totalMonths > 0 ? totalMonths : null;
  };

  // Calculate interest earned
  const calculateInterestEarned = () => {
    const loanAmount = parseFloat(parseNumber(formData.loanAmount));
    const interestRate = parseFloat(formData.interestRate);
    if (isNaN(loanAmount) || isNaN(interestRate)) return null;
    return (loanAmount * interestRate).toFixed(2);
  };

  // Calculate admin fee amount
  const calculateAdminFeeAmount = () => {
    const loanAmount = parseFloat(parseNumber(formData.loanAmount));
    const adminFeePercentage = parseFloat(formData.adminFee);
    if (isNaN(loanAmount) || isNaN(adminFeePercentage)) return null;
    return (loanAmount * adminFeePercentage).toFixed(2);
  };

  // Calculate monthly required payment
  const calculateMonthlyAmount = () => {
    const loanAmount = parseFloat(parseNumber(formData.loanAmount));
    const interestEarned = parseFloat(calculateInterestEarned());
    const adminFeeAmount = parseFloat(calculateAdminFeeAmount());
    const termMonthsNum = parseInt(termMonths, 10);

    if (
      isNaN(loanAmount) ||
      isNaN(interestEarned) ||
      isNaN(adminFeeAmount) ||
      isNaN(termMonthsNum) ||
      termMonthsNum === 0
    )
      return null;

    const total = loanAmount + interestEarned + adminFeeAmount;
    return (total / termMonthsNum).toFixed(2);
  };

  useEffect(() => {
    fetchClients();
    if (!existingLoan) {
      setFormData((prev) => ({ ...prev, loanID: generateRandomLoanID() }));
    }
  }, [existingLoan]);

  useEffect(() => {
    if (existingLoan) {
      setFormData({
        loanID: existingLoan.loanID || "",
        clientID: existingLoan.clientID || "",
        loanAmount: formatNumber(existingLoan.loanAmount),
        interestRate: existingLoan.interestRate || "",
        startDate: existingLoan.startDate?.split("T")[0] || "",
        endDate: existingLoan.endDate?.split("T")[0] || "",
        adminFee: formatNumber(existingLoan.adminFee),
      });

      if (existingLoan.startDate && existingLoan.endDate) {
        settermMonths(
          calculatetermMonths(
            existingLoan.startDate,
            existingLoan.endDate
          ) || ""
        );
      }
    }
  }, [existingLoan]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === "loanAmount" || name === "adminFee") {
      const numericValue = value.replace(/[^0-9.]/g, "");
      setFormData((prev) => ({ ...prev, [name]: formatNumber(numericValue) }));
    } else if (name === "startDate" || name === "endDate") {
      const newFormData = { ...formData, [name]: value };
      setFormData(newFormData);

      const terms = calculatetermMonths(
        newFormData.startDate,
        newFormData.endDate
      );
      settermMonths(terms || "");
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const { clientID, loanAmount, interestRate, startDate, endDate, adminFee } =
      formData;

    if (
      !clientID ||
      !loanAmount ||
      !interestRate ||
      !startDate ||
      !endDate ||
      !termMonths ||
      !adminFee
    ) {
      setNotification?.({
        type: "error",
        message: "All fields must be filled out correctly.",
      });
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit({
        ...formData,
        termMonths: parseInt(termMonths, 10),
        loanAmount: parseFloat(parseNumber(formData.loanAmount)),
        interestRate: parseFloat(formData.interestRate),
        adminFee: parseFloat(parseNumber(formData.adminFee)),
      });
      onClose();
    } catch (err) {
      setNotification?.({ type: "error", message: err.message });
    } finally {
      setIsSubmitting(false);
    }
  };


  const canCalculate = () => {
    const { loanAmount, interestRate, adminFee, startDate, endDate } = formData;
    return (
      loanAmount &&
      interestRate &&
      adminFee &&
      startDate &&
      endDate &&
      termMonths
    );
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* Loan ID - always non-editable */}
      <div>
        <label htmlFor="loanID" className="block text-gray-700 font-medium">
          Loan ID:
        </label>
        <input
          id="loanID"
          name="loanID"
          value={formData.loanID}
          onChange={handleChange}
          disabled
          className="w-full p-2 rounded-md bg-gray-100 border border-gray-300 focus:ring-2 focus:ring-blue-500"
        />
      </div>

      {/* Client dropdown */}
      <div>
        <label htmlFor="clientID" className="block text-gray-700 font-medium">
          Client:
        </label>
        <select
          id="clientID"
          name="clientID"
          value={formData.clientID}
          onChange={handleChange}
          className="w-full p-2 rounded-md bg-gray-100 border border-gray-300 focus:ring-2 focus:ring-blue-500"
          required
        >
          <option value="">-- Select a Client --</option>
          {clients.map((client) => (
            <option key={client._id} value={client._id}>
              {client.name}
            </option>
          ))}
        </select>
      </div>

      {/* Loan Amount */}
      <div>
        <label htmlFor="loanAmount" className="block text-gray-700 font-medium">
          Loan Amount:
        </label>
        <input
          type="text"
          id="loanAmount"
          name="loanAmount"
          value={formData.loanAmount}
          onChange={handleChange}
          placeholder="Enter the principal amount"
          className="w-full p-2 rounded-md bg-white border border-gray-300 focus:ring-2 focus:ring-blue-500"
          required
        />
      </div>

      {/* Interest Rate */}
      <div>
        <label
          htmlFor="interestRate"
          className="block text-gray-700 font-medium"
        >
          Interest Rate:
          <span className="ml-1 text-xs text-gray-500">
            (0.05 => 5%, 0.1 => 10%)
          </span>
        </label>
        <input
          type="text"
          id="interestRate"
          name="interestRate"
          value={formData.interestRate}
          onChange={handleChange}
          placeholder="e.g. 0.05 => 5%"
          className="w-full p-2 rounded-md bg-white border border-gray-300 focus:ring-2 focus:ring-blue-500"
          required
        />
      </div>

      {/* Start Date */}
      <div>
        <label htmlFor="startDate" className="block text-gray-700 font-medium">
          Start Date:
        </label>
        <input
          type="date"
          id="startDate"
          name="startDate"
          value={formData.startDate}
          onChange={handleChange}
          className="w-full p-2 rounded-md bg-white border border-gray-300 focus:ring-2 focus:ring-blue-500"
          required
        />
      </div>

      {/* End Date */}
      <div>
        <label htmlFor="endDate" className="block text-gray-700 font-medium">
          End Date:
        </label>
        <input
          type="date"
          id="endDate"
          name="endDate"
          value={formData.endDate}
          onChange={handleChange}
          className="w-full p-2 rounded-md bg-white border border-gray-300 focus:ring-2 focus:ring-blue-500"
          required
        />
      </div>

      {/* Repayment Terms (Read-Only) */}
      <div>
        <label
          htmlFor="termMonths"
          className="block text-gray-700 font-medium"
        >
          Number of Repayment Months:
        </label>
        <input
          type="text"
          id="termMonths"
          name="termMonths"
          value={termMonths ? termMonths : ""}
          disabled
          className="w-full p-2 rounded-md bg-gray-100 border border-gray-300 cursor-not-allowed"
        />
      </div>

      {/* Admin Fee (0.05 => 5%) */}
      <div>
        <label htmlFor="adminFee" className="block text-gray-700 font-medium">
          Admin Fee (One-Time Fee):
          <span className="ml-1 text-xs text-gray-500">
            (0.05 => 5%, 0.1 => 10%)
          </span>
        </label>
        <input
          type="text"
          id="adminFee"
          name="adminFee"
          value={formData.adminFee}
          onChange={handleChange}
          placeholder="e.g. 0.05 => 5%"
          className="w-full p-2 rounded-md bg-white border border-gray-300 focus:ring-2 focus:ring-blue-500"
          required
        />
      </div>

      {/* Summary Section */}
      <div className="mt-6 p-4 bg-gray-50 border border-gray-200 rounded-md">
        <h3 className="text-lg font-semibold mb-2">Loan Summary</h3>
        {!canCalculate() ? (
          <p className="text-red-500">
            Please ensure all fields are correctly filled out to see the loan
            summary.
          </p>
        ) : (
          <>
            <p>
              <strong>Payment Terms:</strong>{" "}
              {termMonths} month{termMonths > 1 ? "s" : ""}
            </p>
            <p>
              <strong>Interest Earned:</strong>{" "}
              {formatNumber(calculateInterestEarned())}
            </p>
            <p>
              <strong>Admin Fee (One-Time):</strong>{" "}
              {formatNumber(calculateAdminFeeAmount())}
            </p>
            <p>
              <strong>Monthly Required Amount:</strong>{" "}
              {formatNumber(calculateMonthlyAmount())}
            </p>
          </>
        )}
      </div>

      <button
        type="submit"
        disabled={isSubmitting || !canCalculate()}
        className={`w-full p-2 rounded-md text-white font-semibold transition-all ${
          isSubmitting || !canCalculate()
            ? "bg-gray-500 cursor-not-allowed"
            : "bg-blue-500 hover:bg-blue-600"
        }`}
      >
        {isSubmitting
          ? "Saving..."
          : existingLoan
          ? "Update Loan"
          : "Create Loan"}
      </button>
    </form>
  );
}

export default LoanForm;



=========================
File: ./components/LoanList.js
=========================
import React, { useState, useEffect, useMemo, useCallback } from "react";
import GlobalDataTable from "./GlobalDataTable";
import Notification from "./Notification";
import Modal from "./Modal";
import LoanForm from "./LoanForm";
import LoanView from "./LoanView";

/**
 * LoanList: Manages loans and displays them in a table.
 * - Fetches loans and their associated client names.
 * - Allows viewing, editing, and creating loans through modals.
 */
function LoanList({ loans, onSelectLoan, fetchLoans }) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // For client data
  const [clients, setClients] = useState([]);

  // For modals (view/edit/create)
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalMode, setModalMode] = useState("view");
  const [selectedLoan, setSelectedLoan] = useState(null);

  // Notification for modal
  const [notification, setNotification] = useState(null);

  /**
   * Fetch clients and map their data
   */
  const fetchClients = useCallback(async () => {
    try {
      const response = await fetch("http://13.246.7.5:5000/api/clients");
      if (!response.ok) {
        throw new Error(`Error fetching clients: ${response.status}`);
      }
      const { data } = await response.json();
      setClients(data || []);
    } catch (err) {
      console.error("Error fetching clients:", err);
    }
  }, []);

  useEffect(() => {
    fetchClients();
  }, [fetchClients]);

  /**
   * Opens the modal in the specified mode.
   */
  const openModal = (mode, loan = null) => {
    setModalMode(mode);
    setSelectedLoan(loan);
    setNotification(null);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setSelectedLoan(null);
    setIsModalOpen(false);
    setNotification(null);
    setModalMode("view");
  };

  /**
   * Submits a new or updated loan
   */
  const handleSubmitLoan = async (loanData) => {
    try {
      const isEdit = !!(selectedLoan && selectedLoan._id);
      let url = "http://13.246.7.5:5000/api/loans";
      let method = "POST";

      if (isEdit) {
        url = `http://13.246.7.5:5000/api/loans/${selectedLoan._id}`;
        method = "PUT";
      }

      const response = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(loanData),
      });

      const result = await response.json();
      if (!response.ok) {
        throw new Error(result.message || "Failed to save loan details.");
      }

      setNotification({ type: "success", message: "Loan saved successfully!" });
      await fetchLoans(); // Refresh the loan table
    } catch (err) {
      setNotification({ type: "error", message: err.message });
    }
  };


  /**
   * Maps the client name to each loan
   */
  const loansWithClientNames = useMemo(() => {
    return loans.map((loan) => {
      const client = clients.find((c) => c._id === loan.clientID);
      return {
        ...loan,
        clientName: client ? client.name : "Unknown Client",
      };
    });
  }, [loans, clients]);


  /**
   * Table columns for the GlobalDataTable
   */
  const columns = useMemo(
    () => [
      { Header: "Loan ID", accessor: "loanID" },
      {
        Header: "Client",
        accessor: "clientName", // Use mapped client name
      },
      { Header: "Amount", accessor: "loanAmount" },
      {
        Header: "Interest",
        accessor: "interestRate",
        Cell: ({ value }) => {
          if (!value) return "N/A";
          const percent = (parseFloat(value) * 100).toFixed(2);
          return `${percent}%`;
        },
      },
      {
        Header: "Admin Fee",
        accessor: "adminFee",
        Cell: ({ value }) => {
          if (!value) return "N/A";
          const percent = (parseFloat(value) * 100).toFixed(2);
          return `${percent}%`;
        },
      },
      {
        Header: "Actions",
        Cell: ({ row }) => {
          const loan = row.original;
          return (
            <div className="flex gap-2">
              <button
                onClick={() => openModal("view", loan)}
                className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 transition"
              >
                View
              </button>
              <button
                onClick={() => openModal("edit", loan)}
                className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
              >
                Edit
              </button>
            </div>
          );
        },
      },
    ],
    []
  );

  return (
    <div className="bg-white rounded-lg shadow-lg p-4">
      {/* Header Row for adding a new Loan */}
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">Loans</h2>
        <button
          onClick={() => openModal("create")}
          className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition"
        >
          Add Loan
        </button>
      </div>

      <p className="text-gray-500 mb-4">
        Manage all of your loans in one convenient table. Use "View" for a
        read-only summary, or "Edit" to update any details. Remember that
        interest and admin fee are decimals: e.g. 0.1 => 10% or 0.05 => 5%.
      </p>

      {loading && <Notification type="info" message="Loading data..." />}
      {error && <Notification type="error" message={error} />}

      {/* Global Data Table */}
      <GlobalDataTable
        title="Loan Table"
        columns={columns}
        data={loansWithClientNames}
        loading={loading}
        error={error}
        onGlobalFilterChange={() => {}}
        initialPageSize={5}
      />

      {/* Modal for viewing / editing / creating */}
      <Modal
        isOpen={isModalOpen}
        onClose={closeModal}
        title={
          modalMode === "create"
            ? "Create a New Loan"
            : modalMode === "edit"
            ? `Edit Loan: ${selectedLoan?.loanID || ""}`
            : `View Loan: ${selectedLoan?.loanID || ""}`
        }
        description={
          modalMode === "create"
            ? "Fill out the required fields for your new loan. For interest or admin fee, use decimals (0.1 => 10%)."
            : modalMode === "edit"
            ? "Revise the loan details below, especially decimals for interest/admin fee. Then click 'Update Loan'."
            : "Here is a read-only overview of this loan."
        }
        notification={notification}
      >
        {modalMode === "view" && <LoanView loan={selectedLoan} />}

        {(modalMode === "edit" || modalMode === "create") && (
          <LoanForm
            existingLoan={modalMode === "edit" ? selectedLoan : null}
            onSubmit={handleSubmitLoan} // Pass handleSubmitLoan
            onClose={closeModal}
            setNotification={setNotification}
          />

        )}
      </Modal>
    </div>
  );
}

export default LoanList;



=========================
File: ./components/LoanTable.js
=========================
import React, { useState, useEffect, useMemo, useCallback } from "react";
import GlobalDataTable from "./GlobalDataTable";
import Notification from "./Notification";
import Modal from "./Modal";
import LoanForm from "./LoanForm";
import LoanView from "./LoanView";

function LoanTable() {
  const [loans, setLoans] = useState([]);
  const [clients, setClients] = useState([]); // Fetch and store client data
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalMode, setModalMode] = useState("view"); // "view" | "edit" | "create"
  const [selectedLoan, setSelectedLoan] = useState(null);
  const [notification, setNotification] = useState(null);

  /**
   * Fetch clients from the server
   */
  const fetchClients = useCallback(async () => {
    try {
      const response = await fetch("http://13.246.7.5:5000/api/clients");
      if (!response.ok) {
        throw new Error(`Error fetching clients: ${response.status}`);
      }
      const { data } = await response.json();
      setClients(data || []);
    } catch (err) {
      console.error("Error fetching clients:", err);
    }
  }, []);

  /**
   * Fetch loans from the server and map client names
   */
  const fetchLoans = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch("http://13.246.7.5:5000/api/loans");
      if (!response.ok) {
        throw new Error(`Error fetching loans: ${response.status}`);
      }
      const { data } = await response.json();

      // Map client names to loans
      const loansWithClientNames = data.map((loan) => {
        const client = clients.find((c) => c._id === loan.clientID);
        return {
          ...loan,
          clientName: client ? client.name : "Unknown Client",
        };
      });

      setLoans(loansWithClientNames);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, [clients]);

  useEffect(() => {
    fetchClients();
  }, [fetchClients]);

  useEffect(() => {
    if (clients.length > 0) {
      fetchLoans();
    }
  }, [clients, fetchLoans]);

  const openModal = (mode, loan = null) => {
    setModalMode(mode);
    setSelectedLoan(loan);
    setNotification(null);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setSelectedLoan(null);
    setIsModalOpen(false);
    setNotification(null);
    setModalMode("view");
  };

  const handleSubmitLoan = async (loanData) => {
    let url = "http://13.246.7.5:5000/api/loans";
    let method = "POST";

    if (selectedLoan && selectedLoan._id) {
      url = `http://13.246.7.5:5000/api/loans/${selectedLoan._id}`;
      method = "PUT";
    }

    const response = await fetch(url, {
      method,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(loanData),
    });

    const result = await response.json();
    if (!response.ok) {
      throw new Error(result.message || "Failed to save loan details.");
    }

    setNotification({ type: "success", message: "Loan saved successfully!" });
    await fetchLoans();
  };

  /**
   * Table columns
   */
  const columns = useMemo(
    () => [
      { Header: "Loan ID", accessor: "loanID" },
      {
        Header: "Client",
        accessor: "clientName", // Use clientName mapped earlier
      },
      { Header: "Amount", accessor: "loanAmount" },
      {
        Header: "Interest",
        accessor: "interestRate",
        Cell: ({ value }) =>
          value ? `${(parseFloat(value) * 100).toFixed(2)}%` : "N/A",
      },
      {
        Header: "Admin Fee",
        accessor: "adminFee",
        Cell: ({ value }) =>
          value ? `${(parseFloat(value) * 100).toFixed(2)}%` : "N/A",
      },
      {
        Header: "Actions",
        Cell: ({ row }) => {
          const loan = row.original;
          return (
            <div className="space-x-2">
              <button
                onClick={() => openModal("view", loan)}
                className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 transition"
              >
                View
              </button>
              <button
                onClick={() => openModal("edit", loan)}
                className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
              >
                Edit
              </button>
            </div>
          );
        },
      },
    ],
    []
  );

  return (
    <div className="bg-white rounded-lg shadow-lg p-4">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">Loans</h2>
        <button
          onClick={() => openModal("create", null)}
          className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition"
        >
          Add Loan
        </button>
      </div>

      {loading && <Notification type="info" message="Loading data..." />}
      {error && <Notification type="error" message={error} />}

      <GlobalDataTable
        title="Loan Directory"
        columns={columns}
        data={loans}
        loading={loading}
        error={error}
        initialPageSize={5}
      />

      <Modal
        isOpen={isModalOpen}
        onClose={closeModal}
        title={
          modalMode === "create"
            ? "Create a New Loan"
            : modalMode === "edit"
            ? `Edit Loan: ${selectedLoan?.loanID || ""}`
            : `View Loan: ${selectedLoan?.loanID || ""}`
        }
        description={
          modalMode === "create"
            ? "Fill out the required fields for your new loan."
            : modalMode === "edit"
            ? "Modify this loan's details."
            : "Review this loan's details below."
        }
        notification={notification}
      >
        {modalMode === "view" && <LoanView loan={selectedLoan} />}

        {(modalMode === "edit" || modalMode === "create") && (
          <LoanForm
            existingLoan={modalMode === "edit" ? selectedLoan : null}
            onSubmit={handleSubmitLoan}
            onClose={closeModal}
            setNotification={setNotification}
          />
        )}
      </Modal>
    </div>
  );
}

export default LoanTable;



=========================
File: ./components/LoanView.js
=========================
import React from "react";

/**
 * LoanView - A read-only display of a loan's details.
 *
 * Props:
 * - loan (required): The loan object to display
 */
function LoanView({ loan }) {
  if (!loan) return <p className="text-gray-500">No loan selected.</p>;

  // Convert interestRate from decimal to % if you want (e.g. 0.1 => "10%")
  // Similarly for adminFee
  const displayedInterest = loan.interestRate
    ? `${(loan.interestRate * 100).toFixed(2)}%`
    : "N/A";

  const displayedAdminFee = loan.adminFee
    ? `${(loan.adminFee * 100).toFixed(2)}%`
    : "N/A";

  return (
    <div className="space-y-2">
      <p>
        <strong>Loan ID:</strong> {loan.loanID}
      </p>
      <p>
        <strong>Client ID:</strong> {loan.clientID}
      </p>
      <p>
        <strong>Loan Amount:</strong> ${loan.loanAmount}
      </p>
      <p>
        <strong>Interest Rate:</strong> {displayedInterest}{" "}
        <span className="text-xs text-gray-500">
          (entered as decimal, e.g. 0.1 => 10%)
        </span>
      </p>
      <p>
        <strong>Admin Fee:</strong> {displayedAdminFee}{" "}
        <span className="text-xs text-gray-500">
          (0.05 => 5%, etc.)
        </span>
      </p>
      <p>
        <strong>Start Date:</strong>{" "}
        {loan.startDate ? loan.startDate.slice(0, 10) : "N/A"}
      </p>
      <p>
        <strong>End Date:</strong>{" "}
        {loan.endDate ? loan.endDate.slice(0, 10) : "N/A"}
      </p>
      <p>
        <strong>Repayment Months:</strong> {loan.termMonths || "N/A"}
      </p>
    </div>
  );
}

export default LoanView;



=========================
File: ./components/Modal.js
=========================
import React from "react";

/**
 * A reusable Modal component with optional description and notification section.
 *
 * Props:
 * - isOpen: Boolean controlling modal visibility
 * - onClose: Function to close the modal
 * - title: Modal title
 * - description: A short explanation of what this modal does
 * - notification: { type: "success" | "error", message: string } or null
 * - children: The modal body content (form, etc.)
 */
function Modal({ isOpen, onClose, title, description, notification, children }) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="bg-white rounded-lg shadow-lg w-full max-w-md max-h-[90vh] overflow-hidden">
        <header className="px-4 py-2 border-b border-gray-200">
          <h2 className="text-xl font-bold text-gray-800">{title}</h2>
        </header>
        <main className="p-4 overflow-y-auto" style={{ maxHeight: "calc(90vh - 96px)" }}>
          {description && (
            <p className="mb-3 text-sm text-gray-600">{description}</p>
          )}
          {notification && (
            <div
              className={`p-2 rounded mb-4 ${
                notification.type === "success"
                  ? "bg-green-100 text-green-800"
                  : "bg-red-100 text-red-800"
              }`}
            >
              {notification.message}
            </div>
          )}
          {children}
        </main>
        <footer className="px-4 py-2 border-t border-gray-200 flex justify-end">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition duration-200"
          >
            Close
          </button>
        </footer>
      </div>
    </div>
  );
}

export default Modal;



=========================
File: ./components/Notification.js
=========================
import React from "react";

/**
 * A reusable notification component.
 * Props:
 * - type: "success" | "error" | "info"
 * - message: The notification text
 */
const Notification = ({ type, message }) => {
  const baseStyle =
    "px-4 py-2 rounded-md text-sm font-semibold mb-4 text-center";
  const typeStyles = {
    success: "bg-green-100 text-green-800",
    error: "bg-red-100 text-red-800",
    info: "bg-blue-100 text-blue-800",
  };

  return (
    <div className={`${baseStyle} ${typeStyles[type] || ""}`}>
      {message}
    </div>
  );
};

export default Notification;



=========================
File: ./components/PaymentCard.js
=========================
// src/components/PaymentCard.js

import React from "react";
import { formatNumber } from "../utils/formatNumber";

const PaymentCard = ({ payment, onViewDetails }) => {
  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow duration-300 flex flex-col items-center">
      <h3 className="text-lg font-bold text-gray-800 mb-2">Payment ID: {payment.paymentID}</h3>
      <p className="text-gray-600 mb-1">Loan ID: {payment.loanID}</p>
      <p className="text-gray-600 mb-1">Client ID: {payment.clientID}</p>
      <p className="text-gray-600 mb-1">Amount: ${formatNumber(payment.amount)}</p>
      <p className="text-gray-600 mb-1">
        Interest Earned: ${payment.interestEarned ? formatNumber(payment.interestEarned) : "0.00"}
      </p>
      <p className="text-gray-600 mb-1">
        Outstanding Balance: ${payment.outstandingBalance ? formatNumber(payment.outstandingBalance) : "0.00"}
      </p>
      <p className="text-gray-600 mb-1">
        Admin Fee: ${payment.adminFee ? formatNumber(payment.adminFee) : "0.00"}
      </p>
      <button
        onClick={() => onViewDetails(payment)}
        className="mt-auto px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-200"
      >
        View Payment Details
      </button>
    </div>
  );
};

export default PaymentCard;



=========================
File: ./components/PaymentDetails.js
=========================
// src/components/PaymentDetails.js

import React from "react";
import { formatNumber } from "../utils/formatNumber";

const PaymentDetails = ({ payment, onClose }) => {
  return (
    <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-md mx-auto">
      <h2 className="text-2xl font-bold text-gray-800 mb-4 text-center">Payment Details</h2>
      <div className="space-y-3">
        <div>
          <h4 className="text-md font-semibold text-gray-700">Payment ID:</h4>
          <p className="text-gray-600">{payment.paymentID}</p>
        </div>
        <div>
          <h4 className="text-md font-semibold text-gray-700">Loan ID:</h4>
          <p className="text-gray-600">{payment.loanID}</p>
        </div>
        <div>
          <h4 className="text-md font-semibold text-gray-700">Client ID:</h4>
          <p className="text-gray-600">{payment.clientID}</p>
        </div>
        <div>
          <h4 className="text-md font-semibold text-gray-700">Scheduled Date:</h4>
          <p className="text-gray-600">
            {payment.scheduledDate ? new Date(payment.scheduledDate).toLocaleDateString() : "N/A"}
          </p>
        </div>
        <div>
          <h4 className="text-md font-semibold text-gray-700">Payment Date:</h4>
          <p className="text-gray-600">
            {payment.paymentDate ? new Date(payment.paymentDate).toLocaleDateString() : "N/A"}
          </p>
        </div>
        <div>
          <h4 className="text-md font-semibold text-gray-700">Amount:</h4>
          <p className="text-gray-600">${formatNumber(payment.amount)}</p>
        </div>
        <div>
          <h4 className="text-md font-semibold text-gray-700">Interest Earned:</h4>
          <p className="text-gray-600">${payment.interestEarned ? formatNumber(payment.interestEarned) : "0.00"}</p>
        </div>
        <div>
          <h4 className="text-md font-semibold text-gray-700">Admin Fee:</h4>
          <p className="text-gray-600">${payment.adminFee ? formatNumber(payment.adminFee) : "0.00"}</p>
        </div>
        <div>
          <h4 className="text-md font-semibold text-gray-700">Outstanding Balance:</h4>
          <p className="text-gray-600">${formatNumber(payment.outstandingBalance)}</p>
        </div>
        <div>
          <h4 className="text-md font-semibold text-gray-700">Description:</h4>
          <p className="text-gray-600">{payment.description || "N/A"}</p>
        </div>
      </div>
      <div className="mt-6 flex justify-center">
        <button
          onClick={onClose}
          className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition duration-200"
        >
          Close
        </button>
      </div>
    </div>
  );
};

export default PaymentDetails;



=========================
File: ./components/PaymentForm.js
=========================
import React, { useState, useEffect } from "react";
import { MathComponent } from "mathjax-react";
// Utility function to generate a unique Payment ID
const generatePaymentID = () => {
  const randomDigits = Math.floor(100000 + Math.random() * 900000);
  return `PMT-${randomDigits}`;
};

// PaymentForm Component
const PaymentForm = ({ existingPayment, onSubmit, onClose, setNotification }) => {
  // State for form data
  const [formData, setFormData] = useState({
    paymentID: "",
    loanID: "",
    clientID: "",
    scheduledDate: "",
    paymentDate: "",
    amount: "",
    outstandingBalance: "",
    interestEarned: "",
    description: "",
  });
  const [showFormulaDetails, setShowFormulaDetails] = useState(false);

  // State for clients, loans, loan details, and past payments
  const [clients, setClients] = useState([]);
  const [loans, setLoans] = useState([]);
  const [loanDetails, setLoanDetails] = useState(null);
  const [pastPayments, setPastPayments] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // State to track delinquency
  const [isDelinquent, setIsDelinquent] = useState(false);
  const [expectedAmount, setExpectedAmount] = useState(0);
  const [paymentTowardsPrincipal, setPaymentTowardsPrincipal] = useState(0);
  const [paymentTowardsInterest, setPaymentTowardsInterest] = useState(0);

  // Fetch clients on component mount
  useEffect(() => {
    const fetchClients = async () => {
      console.log("Fetching clients...");
      try {
        const response = await fetch(`http://13.246.7.5:5000/api/clients`);
        if (!response.ok) throw new Error("Failed to fetch clients.");
        const { data } = await response.json();
        setClients(data);
        console.log("Clients fetched successfully:", data);
      } catch (error) {
        console.error("Error fetching clients:", error);
        setNotification({ type: "error", message: "Could not load clients." });
      }
    };

    fetchClients();

    // Initialize paymentID if creating a new payment
    if (!existingPayment) {
      const newPaymentID = generatePaymentID();
      setFormData((prev) => ({ ...prev, paymentID: newPaymentID }));
      console.log("Generated new Payment ID:", newPaymentID);
    } else {
      // Populate form with existing payment data for editing
      setFormData({
        ...existingPayment,
        amount: existingPayment.amount.toFixed(2),
        outstandingBalance: existingPayment.outstandingBalance?.toFixed(2) || "",
        interestEarned: existingPayment.interestEarned?.toFixed(2) || "",
        scheduledDate: existingPayment.scheduledDate?.split("T")[0] || "",
        paymentDate: existingPayment.paymentDate?.split("T")[0] || "",
      });
      console.log("Loaded existing payment data:", existingPayment);
    }
  }, [existingPayment, setNotification]);

  // Fetch loans when clientID changes
  useEffect(() => {
    const fetchLoans = async () => {
      if (!formData.clientID) {
        console.log("No client selected. Skipping loan fetch.");
        return;
      }

      console.log(`Fetching loans for Client ID: ${formData.clientID}...`);
      try {
        const response = await fetch(`http://13.246.7.5:5000/api/loans`);
        if (!response.ok) throw new Error("Failed to fetch loans.");
        const { data } = await response.json();
        const filteredLoans = data.filter((loan) => loan.clientID === formData.clientID);
        setLoans(filteredLoans);
        console.log(`Loans fetched for Client ID ${formData.clientID}:`, filteredLoans);
      } catch (error) {
        console.error("Error fetching loans:", error);
        setNotification({ type: "error", message: "Could not load loans for the selected client." });
      }
    };

    fetchLoans();
  }, [formData.clientID, setNotification]);

  // Fetch loan details and past payments when loanID changes
  useEffect(() => {
    const fetchLoanDetails = async () => {
      if (!formData.loanID) {
        console.log("No loan selected. Skipping loan details fetch.");
        setLoanDetails(null);
        setPastPayments([]);
        setFormData((prev) => ({
          ...prev,
          outstandingBalance: "",
          interestEarned: "",
        }));
        setIsDelinquent(false);
        setExpectedAmount(0);
        setPaymentTowardsPrincipal(0);
        setPaymentTowardsInterest(0);
        return;
      }

      console.log(`Fetching details and payments for Loan ID: ${formData.loanID}...`);
      try {
        const [loanResponse, paymentsResponse] = await Promise.all([
          fetch(`http://13.246.7.5:5000/api/loans/loans_by_LID/${formData.loanID}`),
          fetch(`http://13.246.7.5:5000/api/payments?loanID=${formData.loanID}`),
        ]);

        if (!loanResponse.ok) throw new Error("Failed to fetch loan details.");
        if (!paymentsResponse.ok) throw new Error("Failed to fetch past payments.");

        const loanData = await loanResponse.json();
        // Map termMonths to loanTerm and ensure it's a number
        const mappedLoanData = {
          ...loanData.data,
          loanTerm: parseInt(loanData.data.termMonths, 10),
        };
        setLoanDetails(mappedLoanData);
        console.log("Loan details fetched:", mappedLoanData);

        const paymentsData = await paymentsResponse.json();
        setPastPayments(paymentsData.data);
        console.log("Past payments fetched:", paymentsData.data);

        // Perform initial calculations once loan details and past payments are fetched
        if (mappedLoanData && paymentsData.data) {
          performCalculations(mappedLoanData, paymentsData.data);
        }
      } catch (error) {
        console.error("Error fetching loan details or past payments:", error);
        setNotification({ type: "error", message: "Could not load loan details or past payments." });
      }
    };

    fetchLoanDetails();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [formData.loanID]);

  /**
   * Helper function to calculate the total number of terms (months) that have passed.
   * @param {string} startDate - The loan start date in YYYY-MM-DD format.
   * @param {string} paymentDate - The payment date in YYYY-MM-DD format.
   * @returns {number} - The total number of full months between startDate and paymentDate.
   */
  const calculateTotalTerms = (startDate, paymentDate) => {
    const start = new Date(startDate);
    const payment = new Date(paymentDate);

    let months =
      (payment.getFullYear() - start.getFullYear()) * 12 +
      (payment.getMonth() - start.getMonth());

    if (payment.getDate() < start.getDate()) {
      months -= 1;
    }

    const totalTerms = months > 0 ? months : 0;
    console.log(`Calculated Total Terms: ${totalTerms} months`);
    return totalTerms;
  };

  /**
   * Helper function to calculate total interest based on the number of terms.
   * @param {number} loanAmount - The principal loan amount.
   * @param {number} annualInterestRate - The annual interest rate (e.g., 0.1 for 10%).
   * @param {number} totalTerms - The total number of terms (months).
   * @returns {number} - The total interest over all terms.
   */
  const calculateTotalInterest = (loanAmount, annualInterestRate, totalTerms) => {
    const monthlyInterestRate = annualInterestRate / 12;
    const totalInterest = parseFloat((loanAmount * monthlyInterestRate * totalTerms).toFixed(2));
    console.log(`Calculated Total Interest: $${totalInterest}`);
    return totalInterest;
  };

  /**
   * Helper function to calculate interest per term.
   * @param {number} totalInterest - The total interest over all terms.
   * @param {number} totalTerms - The total number of terms.
   * @returns {number} - The interest earned per term.
   */
  const calculateInterestPerTerm = (totalInterest, totalTerms) => {
    if (totalTerms === 0) return 0;
    const interestPerTerm = parseFloat((totalInterest / totalTerms).toFixed(2));
    console.log(`Calculated Interest Per Term: $${interestPerTerm}`);
    return interestPerTerm;
  };

  /**
   * Helper function to calculate the outstanding balance.
   * @param {number} loanAmount - The principal loan amount.
   * @param {number} totalInterest - The total interest over all terms.
   * @param {number} totalPaid - The total amount paid to date.
   * @returns {string} - The outstanding balance formatted to two decimal places.
   */
  const calculateOutstandingBalance = (loanAmount, totalInterest, totalPaid) => {
    const outstanding = loanAmount + totalInterest - totalPaid;
    const formattedOutstanding = outstanding > 0 ? outstanding.toFixed(2) : "0.00";
    console.log(`Calculated Outstanding Balance: $${formattedOutstanding}`);
    return formattedOutstanding;
  };

  /**
   * Perform all necessary calculations for the payment summary.
   * @param {Object} loan - The loan details.
   * @param {Array} payments - Array of past payments.
   */
  const performCalculations = (loan, payments) => {
    console.log("Performing calculations for payment summary...");

    // Determine the latest payment date or use current date if no payments
    const latestPayment = payments.length
      ? payments.reduce((latest, payment) =>
          new Date(payment.paymentDate) > new Date(latest.paymentDate) ? payment : latest
        )
      : null;

    const paymentDate = latestPayment
      ? latestPayment.paymentDate
      : loan.startDate.split("T")[0];

    console.log(`Payment Date for Calculations: ${paymentDate}`);

    const totalTerms = calculateTotalTerms(loan.startDate.split("T")[0], paymentDate);
    const totalInterest = calculateTotalInterest(
      parseFloat(loan.loanAmount),
      parseFloat(loan.interestRate),
      totalTerms
    );
    const interestPerTerm = calculateInterestPerTerm(totalInterest, totalTerms);
    const totalPaid = payments.reduce((acc, p) => acc + parseFloat(p.amount), 0);

    console.log(`Total Amount Paid to Date: $${totalPaid}`);

    const outstanding = calculateOutstandingBalance(
      parseFloat(loan.loanAmount),
      totalInterest,
      totalPaid
    );

    // Calculate expected monthly payment (principal)
    const monthlyPayment = loan.loanTerm ? parseFloat((loan.loanAmount / loan.loanTerm).toFixed(2)) : 0;
    console.log(`Loan Term: ${loan.loanTerm}`);
    if (loan.loanTerm === 0 || isNaN(monthlyPayment)) {
      console.error("Invalid loan term. Cannot calculate monthly payment.");
      setNotification({ type: "error", message: "Invalid loan term. Please check loan details." });
      return;
    }
    const expectedMonthlyAmount = monthlyPayment + interestPerTerm;
    console.log(`Monthly Payment (Principal): $${monthlyPayment.toFixed(2)}`);
    console.log(`Expected Monthly Amount (Principal + Interest): $${expectedMonthlyAmount.toFixed(2)}`);

    // Calculate expected total payment
    const expectedTotalPayment = expectedMonthlyAmount * totalTerms;
    console.log(`Expected Total Payment: $${expectedTotalPayment.toFixed(2)}`);

    // Calculate unpaid terms
    const unpaidTerms = Math.ceil((expectedTotalPayment - totalPaid) / expectedMonthlyAmount);
    console.log(`Unpaid Terms: ${unpaidTerms} month(s)`);

    // Determine delinquency
    if (unpaidTerms > 0) {
      setIsDelinquent(true);
      const newExpectedAmount = unpaidTerms * expectedMonthlyAmount;
      setExpectedAmount(newExpectedAmount);
      console.log(`Delinquent: Yes, Expected Amount to Catch Up: $${newExpectedAmount.toFixed(2)}`);

      // Update description with delinquency message if not already present
      const delinquencyMessage = `Delinquency Notice: You have unpaid payments for ${unpaidTerms} month(s) totaling $${newExpectedAmount.toFixed(2)}. Expected Monthly Amount: $${expectedMonthlyAmount.toFixed(2)}.`;
      if (!formData.description.includes(delinquencyMessage)) {
        setFormData((prev) => ({
          ...prev,
          description: prev.description
            ? `${prev.description}\n${delinquencyMessage}`
            : delinquencyMessage,
        }));
        console.log("Added delinquency message to description.");
      }
    } else {
      setIsDelinquent(false);
      setExpectedAmount(0);
      console.log("Delinquent: No");
      // Optionally, remove delinquency message from description
      const delinquencyMessage = "Delinquency Notice:";
      if (formData.description.includes(delinquencyMessage)) {
        const updatedDescription = formData.description
          .split("\n")
          .filter((line) => !line.startsWith(delinquencyMessage))
          .join("\n");
        setFormData((prev) => ({
          ...prev,
          description: updatedDescription,
        }));
        console.log("Removed delinquency message from description.");
      }
    }

    setFormData((prev) => ({
      ...prev,
      outstandingBalance: outstanding,
      interestEarned: interestPerTerm,
    }));

    console.log("Payment Summary Updated:", {
      outstandingBalance: outstanding,
      interestEarned: interestPerTerm,
    });
  };

  /**
   * Handle changes in form inputs.
   * @param {Object} e - The event object.
   */
  const handleChange = (e) => {
    const { name, value } = e.target;

    console.log(`Form Field Changed: ${name} = ${value}`);

    // Update formData state
    setFormData((prev) => ({ ...prev, [name]: value }));

    // Recalculate outstanding balance and interest earned if relevant fields change
    if ((name === "amount" || name === "paymentDate") && loanDetails) {
      const paymentAmount = name === "amount" ? parseFloat(value) : parseFloat(formData.amount) || 0;
      const paymentDate = name === "paymentDate" ? value : formData.paymentDate || new Date().toISOString().split("T")[0];

      console.log(`Recalculating based on ${name} change: Payment Amount = $${paymentAmount}, Payment Date = ${paymentDate}`);

      if (paymentDate) {
        const totalTerms = calculateTotalTerms(loanDetails.startDate.split("T")[0], paymentDate);
        const totalInterest = calculateTotalInterest(parseFloat(loanDetails.loanAmount), parseFloat(loanDetails.interestRate), totalTerms);
        const interestPerTerm = calculateInterestPerTerm(totalInterest, totalTerms);
        const monthlyPayment = loanDetails.loanTerm ? parseFloat((loanDetails.loanAmount / loanDetails.loanTerm).toFixed(2)) : 0;

        console.log(`Loan Term: ${loanDetails.loanTerm}`);
        if (loanDetails.loanTerm === 0 || isNaN(monthlyPayment)) {
          console.error("Invalid loan term. Cannot calculate monthly payment.");
          setNotification({ type: "error", message: "Invalid loan term. Please check loan details." });
          return;
        }

        const expectedMonthlyAmount = monthlyPayment + interestPerTerm;
        console.log(`Monthly Payment (Principal): $${monthlyPayment.toFixed(2)}`);
        console.log(`Expected Monthly Amount (Principal + Interest): $${expectedMonthlyAmount.toFixed(2)}`);

        const totalPaid = pastPayments.reduce((acc, p) => acc + parseFloat(p.amount), 0) + paymentAmount;

        console.log(`Total Paid after current input: $${totalPaid}`);

        const outstanding = calculateOutstandingBalance(parseFloat(loanDetails.loanAmount), totalInterest, totalPaid);

        // Calculate expected total payment based on terms
        const expectedTotalPayment = expectedMonthlyAmount * totalTerms;
        console.log(`Expected Total Payment: $${expectedTotalPayment.toFixed(2)}`);

        // Calculate unpaid terms
        const unpaidTerms = Math.ceil((expectedTotalPayment - totalPaid) / expectedMonthlyAmount);
        console.log(`Unpaid Terms: ${unpaidTerms} month(s)`);

        // Determine delinquency
        if (unpaidTerms > 0) {
          setIsDelinquent(true);
          const newExpectedAmount = unpaidTerms * expectedMonthlyAmount;
          setExpectedAmount(newExpectedAmount);
          console.log(`Delinquent: Yes, Expected Amount to Catch Up: $${newExpectedAmount.toFixed(2)}`);

          // Update description with delinquency message if not already present
          const delinquencyMessage = `Delinquency Notice: You have unpaid payments for ${unpaidTerms} month(s) totaling $${newExpectedAmount.toFixed(2)}. Expected Monthly Amount: $${expectedMonthlyAmount.toFixed(2)}.`;
          if (!formData.description.includes(delinquencyMessage)) {
            setFormData((prev) => ({
              ...prev,
              description: prev.description
                ? `${prev.description}\n${delinquencyMessage}`
                : delinquencyMessage,
            }));
            console.log("Added delinquency message to description.");
          }
        } else {
          setIsDelinquent(false);
          setExpectedAmount(0);
          console.log("Delinquent: No");

          // Optionally, remove delinquency message from description
          const delinquencyMessage = "Delinquency Notice:";
          if (formData.description.includes(delinquencyMessage)) {
            const updatedDescription = formData.description
              .split("\n")
              .filter((line) => !line.startsWith(delinquencyMessage))
              .join("\n");
            setFormData((prev) => ({
              ...prev,
              description: updatedDescription,
            }));
            console.log("Removed delinquency message from description.");
          }
        }

        setFormData((prev) => ({
          ...prev,
          outstandingBalance: outstanding,
          interestEarned: interestPerTerm,
        }));

        console.log("Updated Payment Summary:", {
          outstandingBalance: outstanding,
          interestEarned: interestPerTerm,
        });
      } else {
        console.log("Insufficient data for calculations. Resetting Payment Summary.");
        setFormData((prev) => ({
          ...prev,
          outstandingBalance: "",
          interestEarned: "",
        }));
      }
    }
  };

  /**
   * Handle form submission.
   * @param {Object} e - The event object.
   */
  const handleSubmit = async (e) => {
    e.preventDefault();

    console.log("Form submission initiated.");

    // Validate required fields
    const requiredFields = [
      "paymentID",
      "loanID",
      "clientID",
      "scheduledDate",
      "paymentDate",
      "amount",
      "outstandingBalance",
    ];

    for (let field of requiredFields) {
      if (!formData[field] && formData[field] !== 0) {
        console.error(`Validation Error: ${field} is required.`);
        setNotification({ type: "error", message: "Please fill in all required fields." });
        return;
      }
    }

    setIsSubmitting(true);
    console.log("Form is submitting...");

    try {
      // Prepare data for submission
      const submissionData = {
        paymentID: formData.paymentID,
        loanID: formData.loanID,
        clientID: formData.clientID,
        scheduledDate: formData.scheduledDate,
        paymentDate: formData.paymentDate,
        amount: parseFloat(formData.amount),
        outstandingBalance: parseFloat(formData.outstandingBalance),
        interestEarned: parseFloat(formData.interestEarned),
        description: formData.description,
      };

      console.log("Submitting Payment Data:", submissionData);

      // Submit the payment data
      await onSubmit(submissionData);

      // Notify success and close the form
      setNotification({ type: "success", message: "Payment successfully submitted." });
      console.log("Payment submitted successfully.");
      onClose();
    } catch (error) {
      console.error("Error submitting payment:", error);
      // Notify failure
      setNotification({ type: "error", message: "Failed to submit payment." });
    } finally {
      setIsSubmitting(false);
      console.log("Form submission ended.");
    }
  };

  // Dynamic label for Amount field
  const amountLabel = isDelinquent
    ? `Amount ($${expectedAmount.toFixed(2)} payment due ):`
    : "Amount (Payment towards Principal and Interest):";

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-6 bg-white rounded-lg shadow-md">
      {/* Two-Column Layout */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Left Column */}
        <div>
          {/* Payment ID */}
          <div>
            <label htmlFor="paymentID" className="block text-gray-700 font-medium mb-1">
              Payment ID:
            </label>
            <input
              type="text"
              id="paymentID"
              name="paymentID"
              value={formData.paymentID}
              readOnly
              className="w-full px-4 py-2 border border-gray-300 rounded-md bg-gray-100"
            />
          </div>

          {/* Client Selection */}
          <div className="mt-4">
            <label htmlFor="clientID" className="block text-gray-700 font-medium mb-1">
              Client:
            </label>
            <select
              id="clientID"
              name="clientID"
              value={formData.clientID}
              onChange={handleChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-md"
              required
            >
              <option value="">-- Select a Client --</option>
              {clients.map((client) => (
                <option key={client._id} value={client._id}>
                  {client.name}
                </option>
              ))}
            </select>
          </div>

          {/* Scheduled Date */}
          <div className="mt-4">
            <label htmlFor="scheduledDate" className="block text-gray-700 font-medium mb-1">
              Scheduled Date:
            </label>
            <input
              type="date"
              id="scheduledDate"
              name="scheduledDate"
              value={formData.scheduledDate}
              onChange={handleChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-md"
              required
            />
          </div>
        </div>

        {/* Right Column */}
        <div>
          {/* Loan Selection */}
          <div>
            <label htmlFor="loanID" className="block text-gray-700 font-medium mb-1">
              Loan:
            </label>
            <select
              id="loanID"
              name="loanID"
              value={formData.loanID}
              onChange={handleChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-md"
              required
              disabled={!formData.clientID}
            >
              <option value="">-- Select a Loan --</option>
              {loans.map((loan) => (
                <option key={loan.loanID} value={loan.loanID}>
                  {loan.loanID} - ${parseFloat(loan.loanAmount).toFixed(2)}
                </option>
              ))}
            </select>
          </div>

          {/* Payment Date */}
          <div className="mt-4">
            <label htmlFor="paymentDate" className="block text-gray-700 font-medium mb-1">
              Payment Date:
            </label>
            <input
              type="date"
              id="paymentDate"
              name="paymentDate"
              value={formData.paymentDate}
              onChange={handleChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-md"
              required
            />
          </div>

          {/* Payment Amount */}
          <div className="mt-4">
            <label htmlFor="amount" className="block text-gray-700 font-medium mb-1">
              {amountLabel}
            </label>
            <input
              type="number"
              id="amount"
              name="amount"
              value={formData.amount}
              onChange={handleChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-md"
              min="0"
              step="0.01"
              required
            />
          </div>
        </div>
      </div>

      {/* Description */}
      <div>
        <label htmlFor="description" className="block text-gray-700 font-medium mb-1">
          Description:
        </label>
        <textarea
          id="description"
          name="description"
          value={formData.description}
          onChange={handleChange}
          className="w-full px-4 py-2 border border-gray-300 rounded-md"
          rows="3"
        ></textarea>
      </div>

      {/* Payment Summary */}
      <div className="bg-gray-50 p-4 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-700">Payment Summary</h3>
        <div className="mt-2">
          {formData.loanID ? (
            loanDetails ? (
              <>
                <p className="text-gray-600">
                  <strong>Outstanding Balance:</strong> ${formData.outstandingBalance || "0.00"}
                </p>
                <p className="text-gray-600">
                  <strong>Interest Earned This Term:</strong> ${formData.interestEarned || "0.00"}
                </p>
                {isDelinquent && (
                  <p className="text-red-600 mt-2">
                    <strong>Delinquency Notice:</strong> You have unpaid payments totaling ${expectedAmount.toFixed(2)}.
                  </p>
                )}
              </>
            ) : (
              <p className="text-gray-600">Loading loan details...</p>
            )
          ) : (
            <p className="text-gray-600">Please select a loan to have the data displayed.</p>
          )}
        </div>
      </div>
      <div className="mt-6">
  <button
    type="button"
    onClick={() => setShowFormulaDetails(!showFormulaDetails)}
    className="text-blue-600 hover:underline"
  >
    {showFormulaDetails ? "Hide Payment Calculation Details" : "Show Payment Calculation Details"}
  </button>
  {showFormulaDetails && (
    <div
      className="mt-4 bg-gray-100 p-4 rounded-lg overflow-auto"
      style={{ maxHeight: "300px" }}
    >
      <h4 className="text-gray-700 font-medium">Calculation Formulas</h4>
      <div className="mt-2">
        <p className="text-gray-600 mt-2">
          <strong>Monthly Interest:</strong>
          <MathComponent
            tex={String.raw`\text{Monthly Interest} = \text{Outstanding Balance} \times \frac{\text{Annual Interest Rate}}{12}`}
            display={true}
          />
        </p>
        <p className="text-gray-600 mt-2">
          <strong>Monthly Principal:</strong>
          <MathComponent
            tex={String.raw`\text{Monthly Principal} = \frac{\text{Loan Amount}}{\text{Term Months}}`}
            display={true}
          />
        </p>
        <p className="text-gray-600 mt-2">
          <strong>Total Monthly Payment:</strong>
          <MathComponent
            tex={String.raw`\text{Total Payment} = \text{Monthly Principal} + \text{Monthly Interest}`}
            display={true}
          />
        </p>
      </div>
    </div>
  )}
</div>








      {/* Submit Button */}
      <div>
        <button
          type="submit"
          disabled={isSubmitting}
          className={`w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition ${
            isSubmitting ? "opacity-50 cursor-not-allowed" : ""
          }`}
        >
          {isSubmitting ? "Submitting..." : "Submit Payment"}
        </button>
      </div>
    </form>
  );
};

export default PaymentForm;



=========================
File: ./components/PaymentList.js
=========================
import React, { useState } from "react";
import GlobalDataTable from "./GlobalDataTable";
import Modal from "./Modal";
import PaymentForm from "./PaymentForm";
import PaymentDetails from "./PaymentDetails";
import Notification from "./Notification";

const PaymentList = ({ payments, refreshPayments, clients = [] }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [selectedPayment, setSelectedPayment] = useState(null);
  const [notification, setNotification] = useState(null);

  // Helper function to map clientID to clientName
  const getClientName = (clientID) => {
    const client = clients.find((c) => c._id === clientID); // Use `_id` for matching
    return client ? client.name : "Unknown Client";
  };

  // Modal controls
  const openAddPaymentModal = () => {
    setIsModalOpen(true);
    setIsEditMode(false);
    setSelectedPayment(null);
    setNotification(null);
  };

  const openEditPaymentModal = (payment) => {
    setIsModalOpen(true);
    setIsEditMode(true);
    setSelectedPayment(payment);
    setNotification(null);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setNotification(null);
  };

  // Add or Edit payment submission
  const handleAddOrEditPaymentSubmit = async (paymentData) => {
    try {
      const url = isEditMode
        ? `http://13.246.7.5:5000/api/payments/${selectedPayment._id}`
        : "http://13.246.7.5:5000/api/payments";
      const method = isEditMode ? "PUT" : "POST";

      const response = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(paymentData),
      });

      const result = await response.json();
      if (!response.ok) {
        throw new Error(result.message || "Error saving payment.");
      }

      setNotification({
        type: "success",
        message: isEditMode
          ? "Payment updated successfully!"
          : "Payment added successfully!",
      });
      await refreshPayments();
      closeModal();
    } catch (error) {
      console.error("Error saving payment:", error);
      setNotification({ type: "error", message: error.message });
    }
  };

  // Delete payment
  const handleDeletePayment = async (paymentID) => {
    if (!window.confirm("Are you sure you want to delete this payment?")) {
      return;
    }

    try {
      const response = await fetch(`http://13.246.7.5:5000/api/payments/${paymentID}`, {
        method: "DELETE",
      });

      const result = await response.json();
      if (!response.ok) {
        throw new Error(result.message || "Error deleting payment.");
      }

      setNotification({
        type: "success",
        message: "Payment deleted successfully!",
      });
      await refreshPayments();
    } catch (error) {
      console.error("Error deleting payment:", error);
      setNotification({ type: "error", message: error.message });
    }
  };

  // View payment details
  const handleViewDetails = (payment) => {
    setSelectedPayment(payment);
  };

  const handleCloseDetails = () => {
    setSelectedPayment(null);
  };

  // Columns for the table
  const columns = React.useMemo(
    () => [
      {
        Header: "Payment ID",
        accessor: "paymentID",
      },
      {
        Header: "Loan ID",
        accessor: "loanID",
      },
      {
        Header: "Client Name",
        accessor: "clientID",
        Cell: ({ value }) => getClientName(value),
      },
      {
        Header: "Scheduled Date",
        accessor: "scheduledDate",
        Cell: ({ value }) =>
          value ? new Date(value).toLocaleDateString() : "N/A",
      },
      {
        Header: "Payment Date",
        accessor: "paymentDate",
        Cell: ({ value }) =>
          value ? new Date(value).toLocaleDateString() : "N/A",
      },
      {
        Header: "Amount",
        accessor: "amount",
        Cell: ({ value }) => (value ? value.toLocaleString() : "0.00"),
      },
      {
        Header: "Outstanding Balance",
        accessor: "outstandingBalance",
        Cell: ({ value }) => (value ? value.toLocaleString() : "0.00"),
      },
      {
        Header: "Actions",
        Cell: ({ row }) => (
          <div className="space-x-2">
            <button
              onClick={() => handleViewDetails(row.original)}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
            >
              View
            </button>
            <button
              onClick={() => openEditPaymentModal(row.original)}
              className="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 transition"
            >
              Edit
            </button>
            <button
              onClick={() => handleDeletePayment(row.original.paymentID)}
              className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition"
            >
              Delete
            </button>
          </div>
        ),
      },
    ],
    [clients]
  );

  return (
    <div className="w-full">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-semibold text-gray-700">Payments</h2>
        <button
          onClick={openAddPaymentModal}
          className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition"
        >
          Add Payment
        </button>
      </div>

      {notification && (
        <Notification type={notification.type} message={notification.message} />
      )}

      <GlobalDataTable
        columns={columns}
        data={payments || []}
        title="Payments"
      />

      {isModalOpen && (
        <Modal
          isOpen={isModalOpen}
          onClose={closeModal}
          title={isEditMode ? "Edit Payment" : "Add New Payment"}
          description={
            isEditMode
              ? "Update the details of the payment below."
              : "Fill out the form below to create a new payment."
          }
        >
          <PaymentForm
            existingPayment={isEditMode ? selectedPayment : null}
            onSubmit={handleAddOrEditPaymentSubmit}
            onClose={closeModal}
            setNotification={setNotification}
          />
        </Modal>
      )}

      {selectedPayment && !isEditMode && (
        <Modal
          isOpen={!!selectedPayment}
          onClose={handleCloseDetails}
          title="Payment Details"
        >
          <PaymentDetails payment={selectedPayment} onClose={handleCloseDetails} />
        </Modal>
      )}
    </div>
  );
};

export default PaymentList;



=========================
File: ./components/Report.js
=========================
import React, { useEffect, useState } from "react";

const Report = ({
  selectedClient,
  selectedLoan,
  payments = [],
  clients = [],
  loans = [],
  setSelectedClient,
  setSelectedLoan,
}) => {
  const [sortedPayments, setSortedPayments] = useState([]);
  const [sortConfig, setSortConfig] = useState({ key: "paymentDate", direction: "descending" });

  const calculateProjectedPayments = () => {
    if (!selectedLoan) return [];
    const { interestRate, loanAmount, termMonths = 12 } = selectedLoan;

    const monthlyInterestRate = interestRate / 12; // Convert annual interest rate to monthly
    const monthlyPrincipal = loanAmount / termMonths; // Fixed monthly principal

    let balance = loanAmount;
    const projectedPayments = [];

    for (let term = 1; term <= termMonths; term++) {
        const interest = balance * monthlyInterestRate; // Monthly interest based on current balance
        const totalPayment = monthlyPrincipal + interest; // Total monthly payment
        balance = Math.max(balance - monthlyPrincipal, 0); // Reduce balance by principal payment

        projectedPayments.push({
            term,
            date: new Date(new Date().setMonth(new Date().getMonth() + term)), // Calculate future date
            principal: parseFloat(monthlyPrincipal.toFixed(2)), // Ensure principal is a float
            interest: parseFloat(interest.toFixed(2)), // Ensure interest is a float
            totalPayment: parseFloat(totalPayment.toFixed(2)), // Ensure total payment is a float
            remainingBalance: parseFloat(balance.toFixed(2)), // Ensure balance is a float
        });
    }

    return projectedPayments;
};



  const projectedPayments = calculateProjectedPayments();

  useEffect(() => {
    if (!sortConfig) return;
    const { key, direction } = sortConfig;
    setSortedPayments(
      [...payments].sort((a, b) => {
        if (a[key] < b[key]) return direction === "ascending" ? -1 : 1;
        if (a[key] > b[key]) return direction === "ascending" ? 1 : -1;
        return 0;
      })
    );
  }, [payments, sortConfig]);

  const handlePrint = () => {
    const printContent = document.getElementById("printable-report");
    const originalContent = document.body.innerHTML;

    document.body.innerHTML = printContent.innerHTML;
    window.print();
    document.body.innerHTML = originalContent;
    window.location.reload();
  };

  const requestSort = (key) => {
    setSortConfig((prevConfig) => ({
      key,
      direction: prevConfig.key === key && prevConfig.direction === "ascending" ? "descending" : "ascending",
    }));
  };

  const filteredLoans = loans.filter((loan) => loan.clientID === selectedClient?._id);

  return (
    <div className="p-8 bg-gray-100 min-h-screen">
      <div id="printable-report" className="bg-white p-8 rounded-lg shadow-lg space-y-8">
        <h2 className="text-3xl font-bold text-gray-800">Generate Comprehensive Report</h2>
        <p className="text-gray-600">Select a client and their associated loan to view detailed payment histories and projections.</p>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div>
            <label htmlFor="client-select" className="block text-lg font-medium text-gray-700 mb-2">Choose Client</label>
            <select
              id="client-select"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              value={selectedClient?._id || ""}
              onChange={(e) => {
                const client = clients.find((c) => c._id === e.target.value);
                setSelectedClient(client);
                setSelectedLoan(null);
              }}
            >
              <option value="">-- Select a Client --</option>
              {clients.map((client) => (
                <option key={client._id} value={client._id}>{client.name}</option>
              ))}
            </select>
          </div>
          <div>
            <label htmlFor="loan-select" className="block text-lg font-medium text-gray-700 mb-2">Choose Loan</label>
            <select
              id="loan-select"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              value={selectedLoan?.loanID || ""}
              onChange={(e) => {
                const loan = loans.find((l) => l.loanID === e.target.value);
                setSelectedLoan(loan);
              }}
              disabled={!selectedClient}
            >
              <option value="">-- Select a Loan --</option>
              {filteredLoans.map((loan) => (
                <option key={loan.loanID} value={loan.loanID}>
                  {loan.loanID} - ${loan.loanAmount.toLocaleString()}
                </option>
              ))}
            </select>
          </div>
        </div>

        {selectedClient && selectedLoan && (
          <>
            <div className="space-y-6">
              {/* Client and Loan Details */}
              <div className="bg-gray-50 p-6 rounded-lg shadow">
                <h3 className="text-xl font-semibold text-gray-800">Client Details</h3>
                <p><strong>Name:</strong> {selectedClient.name}</p>
                <p><strong>Email:</strong> {selectedClient.email}</p>
                <p><strong>Contact Number:</strong> {selectedClient.contactNumber}</p>
              </div>
              <div className="bg-gray-50 p-6 rounded-lg shadow">
                <h3 className="text-xl font-semibold text-gray-800">Loan Details</h3>
                <p><strong>Loan ID:</strong> {selectedLoan.loanID}</p>
                <p><strong>Loan Amount:</strong> ${selectedLoan.loanAmount.toLocaleString()}</p>
                <p><strong>Interest Rate:</strong> {(selectedLoan.interestRate * 100).toFixed(2)}%</p>
                <p><strong>Repayment Terms:</strong> {selectedLoan.termMonths || 12} months</p>
                <p><strong>Admin Fee:</strong> ${selectedLoan.adminFee?.toLocaleString() || 0}</p>
              </div>
            </div>

            {/* Record of Paid Amounts */}
            <div className="overflow-x-auto">
              <h3 className="text-xl font-semibold text-gray-800 mb-4">Record of Paid Amounts</h3>
              {payments.length > 0 ? (
                <table className="min-w-full bg-white border border-gray-300 rounded-lg">
                  <thead className="bg-gray-100">
                    <tr>
                      <th className="py-3 px-6 text-left text-xs font-medium text-gray-700 uppercase">Payment Date</th>
                      <th className="py-3 px-6 text-left text-xs font-medium text-gray-700 uppercase">Amount ($)</th>
                      <th className="py-3 px-6 text-left text-xs font-medium text-gray-700 uppercase">Outstanding Balance ($)</th>
                      <th className="py-3 px-6 text-left text-xs font-medium text-gray-700 uppercase">Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    {sortedPayments.map((payment) => (
                      <tr key={payment._id} className="border-t">
                        <td className="py-4 px-6 text-sm text-gray-700">{new Date(payment.paymentDate).toLocaleDateString()}</td>
                        <td className="py-4 px-6 text-sm text-gray-700">${parseFloat(payment.amount).toLocaleString()}</td>
                        <td className="py-4 px-6 text-sm text-gray-700">${parseFloat(payment.outstandingBalance || 0).toLocaleString()}</td>
                        <td className="py-4 px-6 text-sm text-gray-700">{payment.description || "N/A"}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <p className="text-gray-600">No payments recorded for this loan.</p>
              )}
            </div>

            {/* Projected Payment Schedule */}
            <div className="overflow-x-auto">
              <h3 className="text-xl font-semibold text-gray-800 mb-4">Projected Payment Schedule</h3>
              {projectedPayments.length > 0 ? (
                <table className="min-w-full bg-white border border-gray-300 rounded-lg">
                  <thead className="bg-gray-100">
                    <tr>
                      <th className="py-3 px-6 text-left text-xs font-medium text-gray-700 uppercase">Term</th>
                      <th className="py-3 px-6 text-left text-xs font-medium text-gray-700 uppercase">Payment Date</th>
                      <th className="py-3 px-6 text-left text-xs font-medium text-gray-700 uppercase">Principal ($)</th>
                      <th className="py-3 px-6 text-left text-xs font-medium text-gray-700 uppercase">Interest ($)</th>
                      <th className="py-3 px-6 text-left text-xs font-medium text-gray-700 uppercase">Total Payment ($)</th>
                      <th className="py-3 px-6 text-left text-xs font-medium text-gray-700 uppercase">Remaining Balance ($)</th>
                    </tr>
                  </thead>
                  <tbody>
                    {projectedPayments.map((payment) => (
                      <tr key={payment.term} className="border-t">
                        <td className="py-4 px-6 text-sm text-gray-700">{payment.term}</td>
                        <td className="py-4 px-6 text-sm text-gray-700">{new Date(payment.date).toLocaleDateString()}</td>
                        <td className="py-4 px-6 text-sm text-gray-700">${payment.principal.toFixed(2)}</td>
                        <td className="py-4 px-6 text-sm text-gray-700">${payment.interest.toFixed(2)}</td>
                        <td className="py-4 px-6 text-sm text-gray-700">${payment.totalPayment.toFixed(2)}</td>
                        <td className="py-4 px-6 text-sm text-gray-700">${payment.remainingBalance.toFixed(2)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <p className="text-gray-600">No projected payments available for this loan.</p>
              )}
            </div>
          </>
        )}
        <div className="flex justify-end">
          <button
            onClick={handlePrint}
            className="bg-blue-500 text-white py-3 px-6 rounded-lg hover:bg-blue-600 transition"
          >
            Print Report
          </button>
        </div>
      </div>
    </div>
  );
};

export default Report;



=========================
File: ./context/ClientsContext.js
=========================
import React, { createContext, useState, useContext, useEffect } from "react";
import { getClients, addClient } from "../api/clientsApi";

const ClientsContext = createContext();

export const ClientsProvider = ({ children }) => {
  const [clients, setClients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchClients = async () => {
      try {
        const data = await getClients();
        setClients(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchClients();
  }, []);

  const addNewClient = async (name) => {
    try {
      const newClient = await addClient(name);
      setClients((prev) => [...prev, newClient]);
    } catch (err) {
      throw new Error(err.message);
    }
  };

  return (
    <ClientsContext.Provider value={{ clients, addNewClient, loading, error }}>
      {children}
    </ClientsContext.Provider>
  );
};

export const useClients = () => {
  const context = useContext(ClientsContext);
  if (!context) {
    throw new Error("useClients must be used within ClientsProvider");
  }
  return context;
};



=========================
File: ./ErrorBoundary.js
=========================
import React from "react";

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, info) {
    console.error("ErrorBoundary caught an error:", error, info);
  }

  render() {
    if (this.state.hasError) {
      return <h1 className="text-red-500">Something went wrong: {this.state.error.message}</h1>;
    }
    return this.props.children;
  }
}

export default ErrorBoundary;



=========================
File: ./index.css
=========================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}



=========================
File: ./index.js
=========================
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import ErrorBoundary from "./ErrorBoundary";
import "./index.css"; // Import Tailwind CSS

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <ErrorBoundary>
      <App />
    </ErrorBoundary>
  </React.StrictMode>
);



=========================
File: ./reportWebVitals.js
=========================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;



=========================
File: ./setupTests.js
=========================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';



=========================
File: ./utils/formatNumber.js
=========================
// src/utils/formatNumber.js

/**
 * Format number with thousand separators and fixed decimals
 * @param {number|string} value - The number to format.
 * @param {number} [decimalPlaces=2] - Number of decimal places.
 * @returns {string} - Formatted number with commas and fixed decimals.
 */
export const formatNumber = (value, decimalPlaces = 2) => {
    if (value === "" || value === null || value === undefined) return "";
    const number = parseFloat(value);
    if (isNaN(number)) return value; // Return original value if not a number
    return new Intl.NumberFormat("en-US", {
      minimumFractionDigits: decimalPlaces,
      maximumFractionDigits: decimalPlaces,
    }).format(number);
  };
  


